{"version":3,"sources":["node_modules/browser-pack/_prelude.js","index.ts"],"names":[],"mappings":"AAAA;;;;;;;;;ICAa,S;AAMX,yBAAyB;AAAA;;AAAA,YAAb,GAAa,uEAAF,EAAE;;AAAA;;AALlB,aAAA,GAAA,GAAW,EAAE,MAAM,GAAR,EAAa,MAAM,EAAnB,EAAuB,SAAS,GAAhC,EAAqC,QAAQ,EAA7C,EAAiD,aAAa,GAA9D,EAAmE,aAAa,EAAhF,EAAX;AACP,aAAA,MAAA,GAAS,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAC,CAAZ,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAAC,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,CAAT;AACA,aAAA,MAAA,GAAS,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,EAAS,CAAC,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,CAAT;AACA,aAAA,IAAA,GAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAAP;AA6BQ,aAAA,QAAA,GAAW,UAAC,GAAD,EAAgC,GAAhC,EAA+C,MAA/C,EAA8D;AAC/E,gBAAI,OAAO,IAAI,YAAJ,CAAiB,IAAI,CAAJ,CAAjB,EAAyB,IAAI,CAAJ,CAAzB,EAAiC,IAAI,CAAJ,CAAjC,EAAyC,IAAI,CAAJ,CAAzC,EAAiD,IAA5D;AACA,gBAAI,SAAmB,EAAvB;AAAA,gBAA2B,MAAM,MAAK,GAAL,CAAS,IAA1C;AAAA,gBAAgD,MAAM,MAAK,GAAL,CAAS,IAA/D;AACA,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,MAAzB,EAAiC,KAAK,CAAtC,EAAyC;AACvC,oBAAI,IAAI,CAAC,KAAK,CAAL,IAAU,KAAK,IAAI,CAAT,CAAV,GAAwB,KAAK,IAAI,CAAT,CAAzB,IAAwC,CAAhD;AACA,uBAAO,IAAP,CAAY,CAAZ;AACA,oBAAI,IAAI,GAAR,EAAa,MAAM,CAAN;AACb,oBAAI,IAAI,GAAR,EAAa,MAAM,CAAN;AACd;AACD,mBAAO,MAAK,SAAL,CAAe,MAAf,EAAuB,IAAI,CAAJ,CAAvB,EAA+B,GAA/B,CAAmC,UAAC,CAAD,EAAI,CAAJ,EAAS;AACjD,oBAAI,IAAI,KAAK,GAAL,CAAS,KAAK,KAAL,CAAW,MAAK,SAAL,CAAe,MAAf,EAAuB,CAAvB,EAA0B,IAAI,CAAJ,CAA1B,EAAkC,MAAlC,CAAX,CAAT,CAAR;AACA,oBAAI,MAAM,CAAN,KAAY,MAAM,QAAlB,IAA8B,MAAM,CAAC,QAAzC,EAAmD,OAAO,CAAP;AACnD,uBAAO,CAAP;AACD,aAJM,CAAP;AAKD,SAdO;AAgBA,aAAA,aAAA,GAAgB,UAAC,IAAD,EAAiB,KAAjB,EAAgC,MAAhC,EAAgD,eAAhD,EAA6E;AACnG,gBAAI,WAAqB,EAAzB;AACA,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,MAAzB,EAAiC,GAAjC,EAAsC;AACpC,oBAAI,IAAI,gBAAgB,CAAhB,EAAmB,KAAnB,CAAR;AACA,oBAAI,IAAI,KAAK,CAAL,IAAU,MAAK,GAAL,CAAS,MAAnB,GAA4B,CAA5B,GAAgC,CAAxC;AACA,yBAAS,CAAT,IAAc,SAAS,CAAT,IAAc,SAAS,CAAT,IAAc,CAA5B,GAAgC,CAA9C;AACD;AACD,mBAAO,MAAM,MAAN,GAAe,SAAS,MAAT,CAAgB,UAAC,CAAD,EAAY,CAAZ;AAAA,uBAA0B,IAAI,CAA9B;AAAA,aAAhB,CAAtB;AACD,SARO;AAUA,aAAA,SAAA,GAAY,UAAC,MAAD,EAAmB,KAAnB;AAAA,mBAA+C,OAAO,GAAP,CAAW,UAAC,CAAD,EAAI,CAAJ;AAAA,uBAAU,KAAK,KAAL,CAAW,MAAK,SAAL,CAAe,MAAf,EAAuB,CAAvB,EAA0B,KAA1B,EAAiC,MAAK,IAAtC,IAA8C,CAAzD,CAAV;AAAA,aAAX,CAA/C;AAAA,SAAZ;AAEA,aAAA,SAAA,GAAY,UAAC,MAAD,EAAmB,KAAnB,EAAkC,KAAlC,EAAiD,OAAjD,EAAsE;AACxF,mBAAO,OAAQ,QAAQ,CAAT,GAAc,KAArB,IAA8B,QAAQ,CAAR,CAA9B,CAAyC;AAAzC,cACH,OAAO,QAAQ,KAAf,IAAwB,QAAQ,CAAR,CADrB,CACgC;AADhC,cAEH,OAAO,QAAQ,KAAf,IAAwB,QAAQ,CAAR,CAFrB,CAEgC;AAFhC,cAGH,OAAO,QAAQ,CAAf,IAAoB,QAAQ,CAAR,CAHjB,CAG4B;AAH5B,cAIH,OAAO,KAAP,IAAgB,QAAQ,CAAR,CAJb,CAIwB;AAJxB,cAKH,OAAO,QAAQ,CAAf,IAAoB,QAAQ,CAAR,CALjB,CAK4B;AAL5B,cAMH,OAAQ,QAAQ,CAAT,GAAc,KAArB,IAA8B,QAAQ,CAAR,CAN3B,CAMsC;AANtC,cAOH,OAAQ,KAAD,GAAU,KAAjB,IAA0B,QAAQ,CAAR,CAPvB,CAOkC;AAPlC,cAQH,OAAQ,QAAQ,CAAT,GAAc,KAArB,IAA8B,QAAQ,CAAR,CARlC,CADwF,CAS3C;AAC9C,SAVO;AAtDN,aAAK,IAAI,CAAT,IAAc,GAAd;AAAmB,iBAAK,GAAL,CAAS,CAAT,IAAc,IAAI,CAAJ,CAAd;AAAnB;AACD;;;;8BAEY,K,EAAyB,C,EAAW,C,EAAW,C,EAAW,C,EAAS;AAAA;;AAC9E,gBAAM,SAAS,SAAS,aAAT,CAAuB,QAAvB,CAAf;AACA,gBAAM,MAAM,OAAO,UAAP,CAAkB,IAAlB,CAAZ;AACA,gBAAM,QAAQ,MAAM,WAApB;AAAA,gBAAiC,SAAS,MAAM,YAAhD;AACA,mBAAO,KAAP,GAAe,QAAQ,KAAK,GAAL,CAAS,WAAhC;AACA,mBAAO,MAAP,GAAgB,SAAS,KAAK,GAAL,CAAS,WAAlC;AACA,gBAAM,KAAK,KAAK,GAAL,CAAS,WAApB;AACA,gBAAM,QAAQ;AACZ,qBAAK,CAAC,IAAI,KAAK,CAAV,EAAa,IAAI,KAAK,CAAtB,EAAyB,IAAI,EAA7B,EAAiC,EAAjC,CADO;AAEZ,wBAAQ,CAAC,IAAI,KAAK,CAAV,EAAa,IAAI,CAAJ,GAAQ,KAAK,CAA1B,EAA6B,IAAI,EAAjC,EAAqC,EAArC,CAFI;AAGZ,sBAAM,CAAC,IAAI,KAAK,CAAV,EAAa,IAAI,KAAK,CAAtB,EAAyB,EAAzB,EAA6B,IAAI,EAAjC,CAHM;AAIZ,uBAAO,CAAC,IAAI,CAAJ,GAAQ,KAAK,CAAd,EAAiB,IAAI,KAAK,CAA1B,EAA6B,EAA7B,EAAiC,IAAI,EAArC;AAJK,aAAd;AAOA,iBAAK,IAAI,CAAT,IAAc,KAAd;AAAqB,sBAAM,CAAN,IAAW,MAAM,CAAN,EAAS,GAAT,CAAa,UAAC,CAAD;AAAA,2BAAe,KAAK,KAAL,CAAW,IAAI,OAAK,GAAL,CAAS,WAAxB,CAAf;AAAA,iBAAb,CAAX;AAArB,aACA,IAAI,SAAJ,CAAc,KAAd,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,OAAO,KAAlC,EAAyC,OAAO,MAAhD;AAEA,mBAAO,KAAK,aAAL,CAAmB,KAAK,QAAL,CAAc,GAAd,EAAmB,MAAM,GAAzB,EAA8B,KAAK,MAAnC,CAAnB,EAA+D,MAAM,GAAN,CAAU,CAAV,CAA/D,EAA6E,MAAM,GAAN,CAAU,CAAV,CAA7E,EAA2F,UAAC,CAAD,EAAY,CAAZ;AAAA,uBAA0B,IAAI,CAA9B;AAAA,aAA3F,IAA8H,KAAK,GAAL,CAAS,OAAvI,IACL,KAAK,aAAL,CAAmB,KAAK,QAAL,CAAc,GAAd,EAAmB,MAAM,MAAzB,EAAiC,KAAK,MAAtC,CAAnB,EAAkE,MAAM,MAAN,CAAa,CAAb,CAAlE,EAAmF,MAAM,MAAN,CAAa,CAAb,CAAnF,EAAoG,UAAC,CAAD,EAAY,CAAZ;AAAA,uBAA0B,IAAI,CAA9B;AAAA,aAApG,IAAuI,KAAK,GAAL,CAAS,OAD3I,IAEL,KAAK,aAAL,CAAmB,KAAK,QAAL,CAAc,GAAd,EAAmB,MAAM,IAAzB,EAA+B,KAAK,MAApC,CAAnB,EAAgE,MAAM,IAAN,CAAW,CAAX,CAAhE,EAA+E,MAAM,IAAN,CAAW,CAAX,CAA/E,EAA8F,UAAC,CAAD,EAAY,CAAZ;AAAA,uBAA0B,KAAK,KAAL,CAAW,IAAI,CAAf,CAA1B;AAAA,aAA9F,IAA6I,KAAK,GAAL,CAAS,OAFjJ,IAGL,KAAK,aAAL,CAAmB,KAAK,QAAL,CAAc,GAAd,EAAmB,MAAM,KAAzB,EAAgC,KAAK,MAArC,CAAnB,EAAiE,MAAM,KAAN,CAAY,CAAZ,CAAjE,EAAiF,MAAM,IAAN,CAAW,CAAX,CAAjF,EAAgG,UAAC,CAAD,EAAY,CAAZ;AAAA,uBAA0B,KAAK,KAAL,CAAW,IAAI,CAAf,CAA1B;AAAA,aAAhG,IAA+I,KAAK,GAAL,CAAS,OAH1J;AAID;;;;;;AA/BH,QAAA,SAAA,GAAA,SAAA;AA0EM,OAAQ,SAAR,GAAoB,SAApB","file":"rectangle-scan.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","export class RectCheck {\r\n  public ops: any = { maxB: 230, minB: 25, minEdge: 200, minCov: 50, scaleFactor: 0.5, searchWidth: 35 }\r\n  sobelX = [-1, 0, 1, -2, 0, 2, -1, 0, 1]\r\n  sobelY = [-1, -2, -1, 0, 0, 0, 1, 2, 1]\r\n  blur = [1, 1, 1, 1, 1, 1, 1, 1, 1]\r\n\r\n  constructor(ops: any = {}) {\r\n    for (let i in ops) this.ops[i] = ops[i]\r\n  }\r\n\r\n  public check(image: HTMLImageElement, x: number, y: number, w: number, h: number) {\r\n    const canvas = document.createElement('canvas')\r\n    const ctx = canvas.getContext('2d')\r\n    const width = image.clientWidth, height = image.clientHeight\r\n    canvas.width = width * this.ops.scaleFactor\r\n    canvas.height = height * this.ops.scaleFactor\r\n    const sh = this.ops.searchWidth\r\n    const frame = {\r\n      top: [x + sh / 2, y - sh / 2, w - sh, sh],\r\n      bottom: [x + sh / 2, y + h - sh / 2, w - sh, sh],\r\n      left: [x - sh / 2, y + sh / 2, sh, h - sh],\r\n      right: [x + w - sh / 2, y + sh / 2, sh, h - sh],\r\n    }\r\n\r\n    for (let i in frame) frame[i] = frame[i].map((f: number) => Math.round(f * this.ops.scaleFactor))\r\n    ctx.drawImage(image, 0, 0, canvas.width, canvas.height)\r\n\r\n    return this.checkCoverage(this.getEdges(ctx, frame.top, this.sobelY), frame.top[2], frame.top[2], (i: number, w: number) => i % w) > this.ops.minEdge &&\r\n      this.checkCoverage(this.getEdges(ctx, frame.bottom, this.sobelY), frame.bottom[2], frame.bottom[2], (i: number, w: number) => i % w) > this.ops.minEdge &&\r\n      this.checkCoverage(this.getEdges(ctx, frame.left, this.sobelX), frame.left[2], frame.left[3], (i: number, w: number) => Math.floor(i / w)) > this.ops.minEdge &&\r\n      this.checkCoverage(this.getEdges(ctx, frame.right, this.sobelX), frame.right[2], frame.left[3], (i: number, w: number) => Math.floor(i / w)) > this.ops.minEdge\r\n  }\r\n\r\n  private getEdges = (ctx: CanvasRenderingContext2D, box: number[], kernel: any) => {\r\n    let data = ctx.getImageData(box[0], box[1], box[2], box[3]).data\r\n    let pixels: number[] = [], max = this.ops.maxB, min = this.ops.minB\r\n    for (let i = 0; i < data.length; i += 4) {\r\n      let v = (data[i] + data[i + 1] + data[i + 2]) / 3\r\n      pixels.push(v)\r\n      if (v < max) max = v\r\n      if (v > min) min = v\r\n    }\r\n    return this.blurImage(pixels, box[2]).map((p, i) => {\r\n      let v = Math.abs(Math.floor(this.convolute(pixels, i, box[2], kernel)))\r\n      if (isNaN(v) || v === Infinity || v === -Infinity) return 0\r\n      return v\r\n    })\r\n  }\r\n\r\n  private checkCoverage = (data: number[], width: number, length: number, combinationFunc: Function) => {\r\n    let coverage: number[] = []\r\n    for (let i = 0; i < data.length; i++) {\r\n      let x = combinationFunc(i, width)\r\n      let v = data[i] > this.ops.minCov ? 1 : 0\r\n      coverage[x] = coverage[x] ? coverage[x] + v : v\r\n    }\r\n    return 100 / length * coverage.reduce((t: number, v: number) => t + v)\r\n  }\r\n\r\n  private blurImage = (pixels: number[], width: number): number[] => pixels.map((p, i) => Math.floor(this.convolute(pixels, i, width, this.blur) / 9))\r\n\r\n  private convolute = (pixels: number[], index: number, width: number, pattern: number[]) => {\r\n    return pixels[(index - 1) - width] * pattern[0] // top left\r\n      + pixels[index - width] * pattern[1] // top\r\n      + pixels[index - width] * pattern[2] // top right\r\n      + pixels[index - 1] * pattern[3] // left\r\n      + pixels[index] * pattern[4] // center\r\n      + pixels[index + 1] * pattern[5] // right\r\n      + pixels[(index - 1) + width] * pattern[6] // bottom left\r\n      + pixels[(index) + width] * pattern[7] // bottom\r\n      + pixels[(index + 1) + width] * pattern[8] // bottom right\r\n  }\r\n}\r\n\r\n(<any>window).RectCheck = RectCheck"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}